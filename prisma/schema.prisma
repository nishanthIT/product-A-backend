// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Admin {
  id          Int @id @default(autoincrement())
  email       String
  password    String
  userType    UserType @default(ADMIN) // Adding userType for Admin
}

model Customer {
  id                  Int  @id @default(autoincrement())
  name                String
  mobile              String @unique
  email               String @unique
  password            String
  productsManaged     ProductAtShop[]
  lists              List[]
  userType            UserType @default(CUSTOMER) // Adding userType for Customer
}

model Product {
  id          String @id @default(cuid()) // Unique identifier  //321
  title       String
  productUrl  String?
  caseSize    String
  packetSize  String
  img         Json?     
  barcode     String?    @unique
  caseBarcode String?
  retailSize  String
  rrp         Decimal?
  shops       ProductAtShop[] // Many-to-many relationship with Shop through ProductAtShop
  actionLog   ActionLog[]
}

model Shop {
  id          String @id @default(cuid()) //123
  name        String
  address     String
  mobile      String 
  products    ProductAtShop[] // Many-to-many relationship with Product through ProductAtShop
  actionLog   ActionLog[]
}

model ProductAtShop {
  id          String @id @default(cuid())  //1
  price       Decimal
  shopId      String  //123
  productId   String  //321
  userId      Int?  
  updatedAt   DateTime? @default(now())
  createdAt   DateTime? @default(now())
  employeeId  Int?
  listId      String?
  shop        Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer    Customer?  @relation(fields: [userId], references: [id])
  employee    Empolyee?  @relation(fields: [employeeId], references: [id])
  lists       ListProduct[]
  card_aiel_number  String?
  
  @@unique([shopId, productId])
  @@index([employeeId, updatedAt]) 
} 

model Empolyee {
  id     Int @id @default(autoincrement())
  name   String
  phoneNo  String  @unique
  email String  @unique
  password String
  userType      UserType @default(EMPLOYEE) // Adding userType for Employee
  productAdded  ProductAtShop[]
  actionLog   ActionLog[]

}

model ActionLog {
  id          String   @id @default(cuid())
  employeeId  Int
  shopId      String
  productId   String
  actionType  String   // e.g., "ADD" or "UPDATE"
  timestamp   DateTime @default(now())
  product     Product? @relation(fields: [productId], references: [id])
  shop        Shop?    @relation(fields: [shopId], references: [id])
  employee    Empolyee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId, timestamp]) // Index for querying actions by employee and time
  @@index([shopId, timestamp])     // Index for querying actions by shop and time
  @@index([productId, timestamp])  // Index for querying actions by product and time
}

model List {
  id          String @id @default(cuid())
  name        String
  description String
  customerId   Int
  customer     Customer?  @relation(fields: [customerId], references: [id])
  products      ListProduct[]
}

model ListProduct {
  id              String          @id @default(cuid())
  listId          String
  productAtShopId String
  list            List            @relation(fields: [listId], references: [id], onDelete: Cascade)
  productAtShop   ProductAtShop   @relation(fields: [productAtShopId], references: [id], onDelete: Cascade)
}

// Enum for User Roles
enum UserType {
  ADMIN
  CUSTOMER
  EMPLOYEE
}


